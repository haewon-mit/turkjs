---
layout: post
title: Watch and Report
date: 2015-09-27
categories: inter
---

<div id="shadow" style="background-image:url({{ '/assets/imgs/shade1x1.png' | prepend: site.baseurl | prepend: site.url }}); position:absolute; left:0; top:0; width:100%; height=:100%;"> </div>

<script src="{{ "assets/js/jquery-1.12.3.min.js" | prepend: site.baseurl | prepend: site.url }}"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
<script src="{{ "assets/js/jquery-ui.min.js" | prepend: site.baseurl | prepend: site.url }}"></script>
<script src="{{ "/assets/js/jspsych.js" | prepend: site.baseurl | prepend: site.url }}" type="text/javascript"></script>
<style>
div#videoContainer{
    position: relative;
  }
canvas#overlay {
//    background: red;
    font-weight: bold;
    opacity: 1.0;
    padding: 0em;
    position: absolute;
    z-index: 1;
    text-align: left;
    margin: 0%;
//    width: 356px;
//    height: 279px;
//    width: 420px;
//    height: 236px;
  }

:not(.highlight) .controls {
    padding:0; /*replaces table attribute cellpadding */
    border-collapse: collapse; /*replaces table attribute cellspacing*/
    border-style: none; /*replaces table attribute border */
    border-width: 0px;
    border-color: black;
}

:not(.highlight) .controls td {
    text-align:left; /*replaces td attribute align */
    border: 0px solid grey;
}

</style>

<table class="controls" columns="2" border="0" markdown="1">
<tr><td width="50%" markdown="1">
<div style="vertical-align:top;border: 2px dotted; border-radius:10px; width: 100%; text-align:left; font-size: 100%" markdown="1">
You will be watching a short movie and helping us to identify what you are looking at. This experiment is trying to collect **transitions of your gaze from one object to another**.
                                                                                                                                                                                    
1. A short movie will begin.
2. Pay attention to how your eye moves.
3. When your eye moves from one object or character to the next.
  * Pause the movie.
  * See if a dot exists for the object.
4. Create a dot if it does not exist already.
5. Click and **hold (don't move the mouse)** to select the object dot your eye went **from**.
6. Drag the connection to the other object dot your eye went **to**.
7. When you are finished, Click on the **I'm Done!** button.

</div>
{: #instruction_block}
</td> 
<td markdown="1">
![Hotkeys diagram]({{site.url}}/{{site.baseurl}}/assets/imgs/hotkeys-transitions.png)

### Available hotkeys

* **Creating a dot**: Press the **D** key
* **Stopping the video**: Press **Spacebar**
* **Connecting between two dots**: Click and hold the mouse button near the dot your eye came from. Drag the line to the dot your eye went to and hold.
</td>
</tr></table>
<center>
<a id="golink" href="#" onclick="$('#videoContainer').toggle();playPause();">Ready?</a>
</center>
<br />

-------------
<br />

<div id="videoContainer" markdown="1">
  <center>
  <canvas id="overlay" onmousedown="mdownline()" onmouseup="mupline()" onmousemove="mmove()"></canvas>
  <video id="video1" width="420"   ontimeupdate="getFrameNum()"  onplay="playevt()" onpause="pausevt()" onend="endevt()" src="{{ 'assets/vids/' | prepend: site.baseurl | prepend: site.url }}"></video>
 <table width="420" class="controls">
    <tr>
      <td width="25"><img id="playwidget" src="{{ "assets/imgs/play1-150x150.png" | prepend: site.baseurl | prepend: site.url }}" onclick="playPause()" width="25" height="25" /> </td>
      <td><div id="slide1"></div> </td>
    </tr>
  </table>
  <label for="amount">Time Step:</label>
  <input type="text" id="amount" width="60px" style="border: 0; color: #f6931f; font-weight: bold; width:" />
  <button onclick="newAnchor()" id="dotbutton">New Dot</button> <br />
  <button onclick="endDC();$('#finalContainer').toggle()" id="endButton">I'm Done!</button>
  </center>
------
</div>


<br />
<br />
<div id="finalContainer" style="margin: 0 auto" markdown="1">
# What made you stop watching the video?

  <textarea id="why" cols="50" rows="5"></textarea>
  <button onclick="submit()" id="submitButton">Submit!</button>
</div>


<div id="consent" style="z-index: 57; background: white; position:absolute; left:100px; top:30px; width:75%; padding: 0;">
</div>


<script>
$('#videoContainer').toggle();
$("#finalContainer").toggle();
var dataout = [];
var myVideo=document.getElementById("video1");
var tid2 = setTimeout(init, 200);
var aspect = 279/356;
var anchors_url = "{{ "/anchorsat" | prepend: site.servleturl }}";
var servlet_url = "{{ "/g5" | prepend: site.servleturl }}";
var transitions_url = "{{ "/transition_report" | prepend: site.servleturl }}";
var ldrawing = false;
var donelines = [];
var donedots = [];
var apos = [];
var curseli = -1;
var islocked = -1;
var last_mx;
var last_my;
var last_best_dist = -1;
var thresh = 30;
var locking = null;
var linedone = false;
var spacedown = false;

var newdot = false;

function generateUUID() {
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (d + Math.random()*16)%16 | 0;
        d = Math.floor(d/16);
        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
    });
    return uuid;
};

var turkInfo = jsPsych.turk.turkInfo();

function takenExp() {
  var exp = getParameterByName("ex")+getParameterByName("movname");
  var name = "ndggprg" + exp;
  var val = $.cookie(name);
  return typeof val !== 'undefined';
}

function deleteExp() {
  var exp = getParameterByName("ex")+getParameterByName("movname");
  var name = "ndggprg" + exp;
  $.removeCookie(name);
}

function markExp(iduser) {
  var exp = getParameterByName("ex")+getParameterByName("movname");
  var name = "ndggprg" + exp;
  $.cookie(name, iduser, {expires:365});
}

$.post(servlet_url, {movname: getParameterByName("movname")}, function( data, textStatus, jqxhr ) {
   data_in = $.parseJSON(data);
   console.log("text: " + textStatus + " and data: " + data);
   myVideo.src = myVideo.src + data_in.movieURL;
});


function endDC() {
  if(!myVideo.paused) {
    playPause();
  }

  $("#dotbutton").prop("disabled",true);
  $("#endButton").prop("disabled",true);
  $("#slide1").slider( "disable" );

  $("#playwidget").attr("onclick","");
  document.getElementById("playwidget").src="{{ "assets/imgs/disabled1-150x150.png" | prepend: site.baseurl | prepend: site.url }}";

  $("#overlay").attr("onmousemove", "");
  $("#overlay").attr("onmousedown", "");
  $("#overlay").attr("onmouseup", "");

  setTimeout(function() {
    clearall();
    var c=document.getElementById('overlay');
    var ctx=c.getContext("2d");
    ctx.fillStyle = "rgba(100,100,100,0.95)"
    ctx.fillRect(0,0, $("#overlay").attr("width"), $("#overlay").attr("height"));
  }, 500);

}

function drawanchor(x, y, color) {
  var c=document.getElementById('overlay');
  var ctx=c.getContext("2d");

  var circlewidth = 13;
  var circlegap = 5;
  var p = 100;
//  var p = 17;
  var ccx = x;
  var ccy = y*aspect;

  // Fill with gradient
  ctx.setTransform(1.0,0,0,aspect,0,0);
  var grd=ctx.createRadialGradient(ccx,ccy,circlewidth-circlegap,ccx,ccy,circlewidth );
  grd.addColorStop(0, color);
  grd.addColorStop(1, "rgba(0,0,0,0)");
  ctx.fillStyle=grd;
  ctx.fillRect(ccx-circlewidth,ccy-circlewidth,2*circlewidth, circlewidth*2);
//  console.log("Drawing" + ctx);
}

function newAnchor() {
    $("#dotbutton").prop("disabled",true);
    newdot = true;
}

function drawlineto(x, y) {
    var c=document.getElementById('overlay');
    var ctx=c.getContext("2d");
    ctx.strokeStyle="#FF69B4";
    ctx.lineWidth=3;
    ctx.beginPath();
    ctx.moveTo(apos[islocked][0],apos[islocked][1]);
    ctx.lineTo(x, y);
    ctx.stroke();
}

function lock_it() {
    console.log("lockit?");
    if(ldrawing && !linedone && last_best_dist < thresh) {
        console.log("locked");
        if(islocked !== -1 && curseli != islocked) {
          linedone = true;
          clearall();
          drawlineto(apos[curseli][0], apos[curseli][1]);
          drawAnchors_internal(apos, false);
          var t = Math.floor(myVideo.currentTime *20)
          donelines.push( {t: t,
                           p1: apos[islocked],
                           p2: apos[curseli]});
        } else {
          islocked = curseli;
          clearall();
          drawlineto(last_mx,last_my);
          drawAnchors_internal(apos, false);
        }
    }
}

function clearall() {
  var c=document.getElementById('overlay');
  var ctx=c.getContext("2d");
  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
}

function drawAnchors_internal(anchors, clear) {
  console.log("redrawing: " + curseli);
  if(clear !== false) {
    clearall();
  }
  if(linedone) {
    drawlineto(apos[curseli][0], apos[curseli][1]);
  }
  for(i = 0;i < anchors.length;i++) {
    if(islocked == i || (linedone && i == curseli)) {
      drawanchor(anchors[i][0], anchors[i][1], "rgba(160,32,240,0.6)");
    } else if( i == curseli) {
      drawanchor(anchors[i][0], anchors[i][1], "rgba(0,0,255,0.6)");
    } else {
      drawanchor(anchors[i][0], anchors[i][1], "rgba(255,0,0,0.6)");
    }
  }
}

function submit() {
  console.log("submit!");
  $("#submitButton").toggle();

  var info = jsPsych.turk.turkInfo();
  var idUser;
  if(info.outsideTurk) {
    idUser = generateUUID();
  } else {
    idUser = info.workerId;
  }

  var dat_out = { lines: donelines,
                  anchors: donedots,
                  user: idUser};

  jsPsych.turk.submitToTurk({why: "None"});

  dat_out = $.extend({}, dat_out, {movie: "Black"});
  $.post(transitions_url, dat_out);

  markExp(idUser);
  setTimeout(function() {
     document.location='https://nimbus.media.mit.edu/story//terminate/2015/09/27/epsilon.html';
  }, 2000);
}

function drawAnchors(data_in, successText) {
   var vwidth = myVideo.videoWidth;
   var vheight = myVideo.videoHeight;

   var width = myVideo.width;
   var height = vheight/vwidth*width;

  var t = Math.floor(myVideo.currentTime *20)
  data_in = $.parseJSON(data_in);
  if(t === data_in["t"] && myVideo.paused) {
    console.log("valid anchors.. draw them!");
    apos = [];
    // for each anchor...
    for(i = 0;i < data_in["anchors"].length;i++) {
       var x = data_in["anchors"][i][0] * width;
       var y = data_in["anchors"][i][1] * height;
       apos.push( [x, y]);
    }
    curseli = -1;
    drawAnchors_internal(apos);
    console.log("anchs " + apos);

  }

}


function mupline() {
  if(!newdot) {
    if(ldrawing) {
      console.log("up");
    }

    if(myVideo.paused && !linedone) {
      curseli = -1;
      islocked = -1;
      last_mx = 0;
      last_my = 0;
      last_best_dist = -1;
      locking = null;
      drawAnchors_internal(apos);
    }

    ldrawing = false;
  } else {
    // add new anchor here
    var off = $("#overlay").offset();
    var mx = event.pageX - off.left;
    var my =  event.pageY - off.top;

    apos.push( [mx, my] );
    drawAnchors_internal(apos);
    newdot = false;
    $("#dotbutton").prop("disabled",false);
    var t = Math.floor(myVideo.currentTime *20)
    donedots.push( {t: t,
                    p: [mx, my]});
  }
}

function mdownline() {
  if(!newdot && myVideo.paused) {
   console.log("down");
   ldrawing = true;
   mmove();
  }
}

function dist(pos, x, y) {
  var dx = pos[0] - x;
  var dy = pos[1] - y;
  return Math.sqrt(dx*dx + dy*dy);
}

function mmove() {
  if(!linedone && ldrawing) {
    var off = $("#overlay").offset();
    var mx = event.pageX - off.left;
    var my =  event.pageY - off.top;
    console.log("move " + mx + " " + my);
    var curi = -1;
    var curdistish = 1000000000000000; // some huge number
    for(i = 0;i < apos.length;i++) {
      var distn = dist(apos[i], mx, my);
      if(distn < curdistish) {
        console.log("disn: " + distn + " and " + curdistish);
        curdistish = distn;
        curi = i;
      }


    }
    if (curdistish < thresh) {
      console.log("setting timeout");
      locking = setTimeout(lock_it, 750);
      curseli = curi;
      drawAnchors_internal(apos);
    }

    console.log("curi: "  + curi + " and " + curseli);

    if(curi != curseli) {
      // redraw
      curseli = curi;
      drawAnchors_internal(apos);
      if(locking != null) {
          console.log("clear lockout");
          clearTimeout(locking);
          locking = null;
      }
    }

    last_best_dist = curdistish;
    last_mx = mx;
    last_my = my;

    if(islocked != -1) {
      // update line
      clearall();
      // draw line
      drawlineto(mx,my);
      // draw anchors on top
      drawAnchors_internal(apos, false);

    }
  }
}


function playevt() {
  console.log("play event");
  clearall();

  if(newdot) {
    newdot = false;
    $("#dotbutton").prop("disabled",true);

  }
}

function pausevt() {
  console.log("pause event");
  ldrawing = false;
  apos = [];
  curseli = -1;
  islocked = -1;
  last_mx = 0;
  last_my = 0;
  last_best_dist = -1;
  locking = null;
  linedone = false;

  var t = Math.floor(myVideo.currentTime *20)
  $.post(anchors_url, {"t": t, "movie": getParameterByName('movname')},drawAnchors);
}

function endevt() {
  console.log("end event");
}


function getFrameNum() {
  var t = Math.floor(myVideo.currentTime *20)
  $( "#amount" ).val( "" + t);
  $( "#slide1" ).slider( "value", t );
}

function playPause()
{
  console.log("At least triggered");
  if (myVideo.paused) {
    $("#dotbutton").prop("disabled",true);
    myVideo.play();
    document.getElementById("playwidget").src="{{ "assets/imgs/pause1-150x150.png" | prepend: site.baseurl | prepend: site.url }}";
  } else {
    $("#dotbutton").prop("disabled",false);
    myVideo.pause();
    document.getElementById("playwidget").src="{{ "assets/imgs/play1-150x150.png" | prepend: site.baseurl | prepend: site.url }}";
  }
}

function seek(event, ui) {
	var vl_frac = $( "#slide1" ).slider( "value" ) / $( "#slide1" ).slider( "option", "max" );
	var vid_dur = myVideo.duration; // in secs
	var timePos = vl_frac*vid_dur;
	//set video position
	myVideo.currentTime = timePos;
}

$(function() {
  $(document).ready(function() {
    $('#slide1').slider({
                 slide: seek,
                 start: pausevt,
                 stop: playevt,
                 min: 0,
                 max: 100,
                 values: 0});
  });
  $( "#amount" ).val( "0.0");
  $(document).keydown(function(evt) {
    if (evt.keyCode == 32 && !spacedown) {
      console.log('space')
      playPause();
      spacedown = true;
    }
  }).keyup(function(evt) {
    if (evt.keyCode == 32) {
      spacedown = false;
    } else if (evt.keyCode == 68 || evt.keyCode == 100) {
      if(myVideo.paused) {
        newAnchor();
      }
    }
  });
  
});

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function initVideo() {
   var vwidth = myVideo.videoWidth;
   var vheight = myVideo.videoHeight;

   var width = myVideo.width;
   var height = vheight/vwidth*width;

   //aspect = height/width;
   aspect = 1;

   $("#overlay").attr("width", width);
   $("#overlay").attr("height", height);
}

function init() {
    var dur = Math.floor(myVideo.duration*20);
    console.log("movie duration: " + dur);
    $( "#slide1" ).slider( "option", "max",  dur);
    $( "#slide1" ).slider( "enable" );
    initVideo();
    $("#dotbutton").prop("disabled",true);
};


function gethandleMark() {
  return 420*myVideo.currentTime/myVideo.duration;
}




//////////////////////////////
function agreed() {
  console.log("They agreed.");
  $("#consent").toggle();
  $("#shadow").toggle();
}

function declined() {
  console.log("They declined.");
}

if(turkInfo.previewMode && !turkInfo.outsideTurk) {
  $("#golink").toggle();
}

if(!turkInfo.previewMode && !turkInfo.outsideTurk) {
  $("#shadow").toggle();
  $("#consent").toggle();
}

setTimeout(function() {
  if(turkInfo.outsideTurk) {
    if(takenExp()) {
      $("#golink").toggle();
      $("#instruction_block").html("<h2> You have already participated in this experiment</h2>");
    } else {
      $("#shadow").toggle();
      $("#consent").toggle();
    }
  }
}, 800);

$("#consent").load("{{ '/consent/2015/09/27/alpha.html' | prepend: site.baseurl | prepend: site.url }} article", function() {
   $("#agreeBut").attr("href", "#");
   $("#agreeBut").attr("onclick", "agreed();");
   $("#declineBut").attr("onclick", "declined();");
   $("#declineBut").attr("href", "#");
   $("#shadow").css("height", $(document).height());
});

$("#consent").toggle();
$("#shadow").toggle();

</script>
